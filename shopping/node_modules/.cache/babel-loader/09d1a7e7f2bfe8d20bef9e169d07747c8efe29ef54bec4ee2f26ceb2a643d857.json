{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from '@/store';\nimport Home from '@/views/home';\n// import Login from '@/views/login'\n// import Search from '@/views/search'\n// import SearchList from '@/views/search/list'\n// import Goods from '@/views/goods'\n// import Pay from '@/views/pay'\n// import Order from '@/views/order'\n\nVue.use(VueRouter);\nconst router = new VueRouter({\n  routes: [\n  // 数组里面包对象\n  {\n    path: '/',\n    component: Home,\n    // 重定向\n    redirect: '/first',\n    // 二级路由\n    children: [{\n      path: '/first',\n      component: () => import('@/views/home/first.vue')\n    }, {\n      path: '/category',\n      component: () => import('@/views/home/category.vue')\n    }, {\n      path: '/shopping',\n      component: () => import('@/views/home/shopping.vue')\n    }, {\n      path: '/my',\n      component: () => import('@/views/home/my.vue')\n    }]\n  }, {\n    path: '/login',\n    component: () => import('@/views/login')\n  }, {\n    path: '/search',\n    component: () => import('@/views/search')\n  }, {\n    path: '/searchlist',\n    component: () => import('@/views/search/list.vue')\n  },\n  // 动态路由传参，确认将来是哪个商品，路由参数中携带 id\n  {\n    path: '/goods/:id',\n    component: () => import('@/views/goods')\n  }, {\n    path: '/pay',\n    component: () => import('@/views/pay')\n  }, {\n    path: '/order',\n    component: () => import('@/views/order')\n  }, {\n    path: '/address',\n    component: () => import('@/view/address')\n  }]\n});\n\n// 全局前置导航守卫\n\n// 所有的路由在真正被访问到之前（解析渲染对应组件页面前），都会先经过全局前置守卫\n// 只有全局前置守卫放行了，才会到达对应的页面\n\n// to：到哪里去，到哪去的完整路由信息对象（路径，参数）；\n// from：从哪里来，从哪来的完整路由信息对象（路径，参数）；\n// next（）：是否放行；\n// 1.next()    ：直接放行，放行到to要去的路径；\n// 2.next(路径)：进行拦截，拦截到next里面配置的路径。\n\n// 定义一个数组，专门用户存放所有需要权限访问的页面\nconst authUrls = ['/pay', '/order'];\nrouter.beforeEach((to, from, next) => {\n  // console.log(to, from, next)\n  // 看 to.path 是否在 authUrls 中出现过\n  if (!authUrls.includes(to.path)) {\n    // 非权限页面，直接放行\n    next();\n    return;\n  }\n  // 权限页面，需要判断token\n  // const token = store.state.user.userInfo.token\n  const token = store.getters.token;\n  if (token) {\n    next();\n  } else {\n    next('/login');\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","Home","use","router","routes","path","component","redirect","children","authUrls","beforeEach","to","from","next","includes","token","getters"],"sources":["D:/A/WEB/dark horse/Vue/Vue2.0/demo/shopping/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nimport store from '@/store'\n\nimport Home from '@/views/home'\n// import Login from '@/views/login'\n// import Search from '@/views/search'\n// import SearchList from '@/views/search/list'\n// import Goods from '@/views/goods'\n// import Pay from '@/views/pay'\n// import Order from '@/views/order'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  routes: [\n    // 数组里面包对象\n    {\n      path: '/',\n      component: Home,\n      // 重定向\n      redirect: '/first',\n      // 二级路由\n      children: [\n        { path: '/first', component: () => import('@/views/home/first.vue') },\n        { path: '/category', component: () => import('@/views/home/category.vue') },\n        { path: '/shopping', component: () => import('@/views/home/shopping.vue') },\n        { path: '/my', component: () => import('@/views/home/my.vue') }\n      ]\n    },\n    { path: '/login', component: () => import('@/views/login') },\n    { path: '/search', component: () => import('@/views/search') },\n    { path: '/searchlist', component: () => import('@/views/search/list.vue') },\n    // 动态路由传参，确认将来是哪个商品，路由参数中携带 id\n    { path: '/goods/:id', component: () => import('@/views/goods') },\n    { path: '/pay', component: () => import('@/views/pay') },\n    { path: '/order', component: () => import('@/views/order') },\n    { path: '/address', component: () => import('@/view/address') }\n  ]\n})\n\n// 全局前置导航守卫\n\n// 所有的路由在真正被访问到之前（解析渲染对应组件页面前），都会先经过全局前置守卫\n// 只有全局前置守卫放行了，才会到达对应的页面\n\n// to：到哪里去，到哪去的完整路由信息对象（路径，参数）；\n// from：从哪里来，从哪来的完整路由信息对象（路径，参数）；\n// next（）：是否放行；\n// 1.next()    ：直接放行，放行到to要去的路径；\n// 2.next(路径)：进行拦截，拦截到next里面配置的路径。\n\n// 定义一个数组，专门用户存放所有需要权限访问的页面\nconst authUrls = ['/pay', '/order']\n\nrouter.beforeEach((to, from, next) => {\n  // console.log(to, from, next)\n  // 看 to.path 是否在 authUrls 中出现过\n  if (!authUrls.includes(to.path)) {\n    // 非权限页面，直接放行\n    next()\n    return\n  }\n  // 权限页面，需要判断token\n  // const token = store.state.user.userInfo.token\n  const token = store.getters.token\n  if (token) {\n    next()\n  } else {\n    next('/login')\n  }\n})\n\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,KAAK,MAAM,SAAS;AAE3B,OAAOC,IAAI,MAAM,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEAH,GAAG,CAACI,GAAG,CAACH,SAAS,CAAC;AAElB,MAAMI,MAAM,GAAG,IAAIJ,SAAS,CAAC;EAC3BK,MAAM,EAAE;EACN;EACA;IACEC,IAAI,EAAE,GAAG;IACTC,SAAS,EAAEL,IAAI;IACf;IACAM,QAAQ,EAAE,QAAQ;IAClB;IACAC,QAAQ,EAAE,CACR;MAAEH,IAAI,EAAE,QAAQ;MAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,wBAAwB;IAAE,CAAC,EACrE;MAAED,IAAI,EAAE,WAAW;MAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B;IAAE,CAAC,EAC3E;MAAED,IAAI,EAAE,WAAW;MAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B;IAAE,CAAC,EAC3E;MAAED,IAAI,EAAE,KAAK;MAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,qBAAqB;IAAE,CAAC;EAEnE,CAAC,EACD;IAAED,IAAI,EAAE,QAAQ;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,eAAe;EAAE,CAAC,EAC5D;IAAED,IAAI,EAAE,SAAS;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,gBAAgB;EAAE,CAAC,EAC9D;IAAED,IAAI,EAAE,aAAa;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB;EAAE,CAAC;EAC3E;EACA;IAAED,IAAI,EAAE,YAAY;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,eAAe;EAAE,CAAC,EAChE;IAAED,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,aAAa;EAAE,CAAC,EACxD;IAAED,IAAI,EAAE,QAAQ;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,eAAe;EAAE,CAAC,EAC5D;IAAED,IAAI,EAAE,UAAU;IAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,gBAAgB;EAAE,CAAC;AAEnE,CAAC,CAAC;;AAEF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMG,QAAQ,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;AAEnCN,MAAM,CAACO,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA;EACA,IAAI,CAACJ,QAAQ,CAACK,QAAQ,CAACH,EAAE,CAACN,IAAI,CAAC,EAAE;IAC/B;IACAQ,IAAI,CAAC,CAAC;IACN;EACF;EACA;EACA;EACA,MAAME,KAAK,GAAGf,KAAK,CAACgB,OAAO,CAACD,KAAK;EACjC,IAAIA,KAAK,EAAE;IACTF,IAAI,CAAC,CAAC;EACR,CAAC,MAAM;IACLA,IAAI,CAAC,QAAQ,CAAC;EAChB;AACF,CAAC,CAAC;AAEF,eAAeV,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}