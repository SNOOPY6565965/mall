{"ast":null,"code":"import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport axios from 'axios';\n// 创建 axios 实例，将来对创建出来的实例，进行自定义配置\n// 好处：不会污染原始的 axios 实例\nconst instance = axios.create({\n  baseURL: 'http://smart-shop.itheima.net/index.php?s=/api',\n  timeout: 5000,\n  headers: {\n    platform: 'App'\n  }\n});\n\n// 自定义配置 - 请求/响应 拦截器\n// 添加请求拦截器\ninstance.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n\n  // 开启loading，禁止背景点击（节流处理，防止多次无效触发）\n  _Toast.loading({\n    message: '加载中...',\n    forbidClick: true,\n    loadingType: 'spinner'\n  });\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\ninstance.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么 （默认axios会多包装一层data，需要在响应拦截器中处理一下）\n  const res = response.data;\n  console.log(res);\n  if (res.status !== 200) {\n    // 给提示\n    _Toast(res.message);\n    // 抛出一个错误的promise\n    return Promise.reject(res.message);\n  }\n  // 对响应数据做点什么\n  return res;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\n\n// 导出配置好的实例\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","headers","platform","interceptors","request","use","config","_Toast","loading","message","forbidClick","loadingType","error","Promise","reject","response","res","data","console","log","status"],"sources":["D:/A/WEB/dark horse/Vue/Vue2.0/demo/shopping/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Toast } from 'vant'\r\n// 创建 axios 实例，将来对创建出来的实例，进行自定义配置\r\n// 好处：不会污染原始的 axios 实例\r\nconst instance = axios.create({\r\n  baseURL: 'http://smart-shop.itheima.net/index.php?s=/api',\r\n  timeout: 5000,\r\n  headers: {\r\n    platform: 'App'\r\n  }\r\n})\r\n\r\n// 自定义配置 - 请求/响应 拦截器\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(function (config) {\r\n  // 在发送请求之前做些什么\r\n\r\n  // 开启loading，禁止背景点击（节流处理，防止多次无效触发）\r\n  Toast.loading({\r\n    message: '加载中...',\r\n    forbidClick: true,\r\n    loadingType: 'spinner'\r\n  })\r\n  return config\r\n}, function (error) {\r\n  // 对请求错误做些什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(function (response) {\r\n  // 2xx 范围内的状态码都会触发该函数。\r\n  // 对响应数据做点什么 （默认axios会多包装一层data，需要在响应拦截器中处理一下）\r\n  const res = response.data\r\n  console.log(res)\r\n  if (res.status !== 200) {\r\n    // 给提示\r\n    Toast(res.message)\r\n    // 抛出一个错误的promise\r\n    return Promise.reject(res.message)\r\n  }\r\n  // 对响应数据做点什么\r\n  return res\r\n}, function (error) {\r\n  // 超出 2xx 范围的状态码都会触发该函数。\r\n  // 对响应错误做点什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 导出配置好的实例\r\nexport default instance\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB;AACA;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,gDAAgD;EACzDC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACPC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACA;AACAL,QAAQ,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EAClD;;EAEA;EACAC,MAAA,CAAMC,OAAO,CAAC;IACZC,OAAO,EAAE,QAAQ;IACjBC,WAAW,EAAE,IAAI;IACjBC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,OAAOL,MAAM;AACf,CAAC,EAAE,UAAUM,KAAK,EAAE;EAClB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAf,QAAQ,CAACM,YAAY,CAACY,QAAQ,CAACV,GAAG,CAAC,UAAUU,QAAQ,EAAE;EACrD;EACA;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzBC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;EAChB,IAAIA,GAAG,CAACI,MAAM,KAAK,GAAG,EAAE;IACtB;IACAb,MAAA,CAAMS,GAAG,CAACP,OAAO,CAAC;IAClB;IACA,OAAOI,OAAO,CAACC,MAAM,CAACE,GAAG,CAACP,OAAO,CAAC;EACpC;EACA;EACA,OAAOO,GAAG;AACZ,CAAC,EAAE,UAAUJ,KAAK,EAAE;EAClB;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA,eAAef,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}