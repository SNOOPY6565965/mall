{"ast":null,"code":"// 购物车\nimport { getCartList, changeCount } from '@/api/cart.js';\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      cartList: []\n    };\n  },\n  mutations: {\n    // 提供一个 设置 cartList 的mutation\n    setCartList(state, newList) {\n      state.cartList = newList;\n    },\n    toggleCheck(state, goodsId) {\n      // 让 对应的 id 的项 状态取反\n      const goods = state.cartList.find(item => item.goods_id === goodsId);\n      goods.isChecked = !goods.isChecked;\n    },\n    toggleAllCheck(state, flag) {\n      // 让所有的小选框，同步设置\n      state.cartList.forEach(item => {\n        item.isChecked = flag;\n      });\n    },\n    changeCount(state, {\n      goodsId,\n      goodsNum\n    }) {\n      const goods = state.cartList.find(item => item.goods_id === goodsId);\n      goods.goods_num = goodsNum;\n    }\n  },\n  actions: {\n    // 获取购物车列表\n    async getCartAction(context) {\n      const {\n        data\n      } = await getCartList();\n      // 后台返回的数据中，不包含复选框的选中状态；\n      // 为了实现将来的功能，需要手动维护数据，\n      // 给每一项，添加一个 isChecked 状态（标记当前商品是否选中）\n      data.list.forEach(item => {\n        item.isChecked = true;\n      });\n      context.commit('setCartList', data.list);\n    },\n    async changeCountAction(context, obj) {\n      const {\n        goodsNum,\n        goodsId,\n        goodsSkuId\n      } = obj;\n      // 先本地修改\n      context.commit('changeCount', {\n        goodsId,\n        goodsNum\n      });\n      // 再同步到后台\n      await changeCount(goodsId, goodsNum, goodsSkuId);\n    },\n    // 删除购物车数据\n    async delSelect(context) {\n      const selCartList = context.getters.selCartList;\n      const cartIds = selCartList.map(item => item.id);\n      await this.delSelect(cartIds);\n      Toast('删除成功');\n    }\n  },\n  getters: {\n    // 求所有的商品总数\n    cartTotal(state) {\n      return state.cartList.reduce((sum, item) => sum + item.goods_num, 0);\n    },\n    // 选中的商品项\n    selCartList(state) {\n      // 过滤\n      return state.cartList.filter(item => item.isChecked);\n    },\n    // 选中的总数\n    selCount(state, getters) {\n      return getters.selCartList.reduce((sum, item) => sum + item.goods_num, 0);\n    },\n    // 选中的总价\n    selPrice(state, getters) {\n      return getters.selCartList.reduce((sum, item) => {\n        return sum + item.goods_num * item.goods.goods_price_min;\n      }, 0).toFixed(2);\n    },\n    // 是否全选\n    isAllChecked(state) {\n      return state.cartList.every(item => item.isChecked);\n    }\n  }\n};","map":{"version":3,"names":["getCartList","changeCount","namespaced","state","cartList","mutations","setCartList","newList","toggleCheck","goodsId","goods","find","item","goods_id","isChecked","toggleAllCheck","flag","forEach","goodsNum","goods_num","actions","getCartAction","context","data","list","commit","changeCountAction","obj","goodsSkuId","delSelect","selCartList","getters","cartIds","map","id","Toast","cartTotal","reduce","sum","filter","selCount","selPrice","goods_price_min","toFixed","isAllChecked","every"],"sources":["D:/A/WEB/dark horse/Vue/Vue2.0/demo/shopping/src/store/modules/cart.js"],"sourcesContent":["// 购物车\r\nimport { getCartList, changeCount } from '@/api/cart.js'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state () {\r\n    return {\r\n      cartList: []\r\n    }\r\n  },\r\n  mutations: {\r\n    // 提供一个 设置 cartList 的mutation\r\n    setCartList (state, newList) {\r\n      state.cartList = newList\r\n    },\r\n    toggleCheck (state, goodsId) {\r\n      // 让 对应的 id 的项 状态取反\r\n      const goods = state.cartList.find(item => item.goods_id === goodsId)\r\n      goods.isChecked = !goods.isChecked\r\n    },\r\n    toggleAllCheck (state, flag) {\r\n      // 让所有的小选框，同步设置\r\n      state.cartList.forEach(item => {\r\n        item.isChecked = flag\r\n      })\r\n    },\r\n    changeCount (state, { goodsId, goodsNum }) {\r\n      const goods = state.cartList.find(item => item.goods_id === goodsId)\r\n      goods.goods_num = goodsNum\r\n    }\r\n  },\r\n  actions: {\r\n    // 获取购物车列表\r\n    async getCartAction (context) {\r\n      const { data } = await getCartList()\r\n      // 后台返回的数据中，不包含复选框的选中状态；\r\n      // 为了实现将来的功能，需要手动维护数据，\r\n      // 给每一项，添加一个 isChecked 状态（标记当前商品是否选中）\r\n      data.list.forEach(item => {\r\n        item.isChecked = true\r\n      })\r\n      context.commit('setCartList', data.list)\r\n    },\r\n    async changeCountAction (context, obj) {\r\n      const { goodsNum, goodsId, goodsSkuId } = obj\r\n      // 先本地修改\r\n      context.commit('changeCount', { goodsId, goodsNum })\r\n      // 再同步到后台\r\n      await changeCount(goodsId, goodsNum, goodsSkuId)\r\n    },\r\n\r\n    // 删除购物车数据\r\n    async delSelect (context) {\r\n      const selCartList = context.getters.selCartList\r\n      const cartIds = selCartList.map(item => item.id)\r\n      await this.delSelect(cartIds)\r\n      Toast('删除成功')\r\n    }\r\n  },\r\n  getters: {\r\n    // 求所有的商品总数\r\n    cartTotal (state) {\r\n      return state.cartList.reduce((sum, item) => sum + item.goods_num, 0)\r\n    },\r\n    // 选中的商品项\r\n    selCartList (state) { // 过滤\r\n      return state.cartList.filter(item => item.isChecked)\r\n    },\r\n    // 选中的总数\r\n    selCount (state, getters) {\r\n      return getters.selCartList.reduce((sum, item) => sum + item.goods_num, 0)\r\n    },\r\n    // 选中的总价\r\n    selPrice (state, getters) {\r\n      return getters.selCartList.reduce((sum, item) => {\r\n        return sum + item.goods_num * item.goods.goods_price_min\r\n      }, 0).toFixed(2)\r\n    },\r\n    // 是否全选\r\n    isAllChecked (state) {\r\n      return state.cartList.every(item => item.isChecked)\r\n    }\r\n\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}