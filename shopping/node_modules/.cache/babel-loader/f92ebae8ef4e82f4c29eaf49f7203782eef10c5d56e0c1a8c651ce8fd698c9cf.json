{"ast":null,"code":"import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport \"core-js/modules/es.array.push.js\";\n// import request from '@/utils/request.js'\nimport { getPicCode, getMsgCode, codeLogin } from '@/api/login.js';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      picCode: '',\n      // 用户输入的图形验证码\n      picKey: '',\n      // 将来请求传递的图形验证码\n      picUrl: '',\n      // 存储请求渲染的图片地址\n      totalSecond: 60,\n      // 总秒数\n      second: 60,\n      // 当前秒数，开定时器 second--\n      timer: null,\n      // 定时器 id\n      mobile: '',\n      // 手机号\n      msgCode: '' // 手机验证码\n    };\n  },\n  async created() {\n    this.getPicCode();\n  },\n  methods: {\n    // 获取图像验证码\n    async getPicCode() {\n      // const { data: { base64, key } } = await request.get('/captcha/image')\n      const {\n        data: {\n          base64,\n          key\n        }\n      } = await getPicCode();\n      this.picUrl = base64; // 存储地址\n      this.picKey = key; // 存储唯一标识\n    },\n    // 校验 手机号 和 图形验证码 是否合格\n    validFn() {\n      if (!/^1[3-9]\\d{9}$/.test(this.mobile)) {\n        _Toast('请输入正确的手机号');\n        return false;\n      }\n      if (!/^\\w{4}$/.test(this.picCode)) {\n        _Toast('图形验证码不正确');\n        return false;\n      }\n      return true;\n    },\n    // 获取短信验证码\n    async getCode() {\n      if (!this.validFn()) {\n        // 如果没有通过校验，没有必要往下走\n        return;\n      }\n      // 发送短信验证\n      await getMsgCode(this.picCode, this.picKey, this.mobile);\n      _Toast('发送成功，请注意查收');\n      if (!this.timer && this.second === this.totalSecond) {\n        // 开启倒计时\n        this.timer = setInterval(() => {\n          this.second--;\n          if (this.second <= 0) {\n            // 清除\n            clearInterval(this.timer);\n            this.timer = null; // 重置定时器 id\n            this.second = this.totalSecond;\n          }\n        }, 1000);\n      }\n    },\n    // 登录\n    async login() {\n      if (!this.validFn()) {\n        return;\n      }\n      if (!/^\\d{6}$/.test(this.msgCode)) {\n        _Toast('请输入正确的手机验证码');\n      }\n      await codeLogin(this.mobile, this.msgCode);\n      _Toast('登录成功');\n      // 跳转到首页\n      this.$router.push('/');\n    }\n  },\n  // 离开页面，清除定时器\n  destroyed() {\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"names":["getPicCode","getMsgCode","codeLogin","name","data","picCode","picKey","picUrl","totalSecond","second","timer","mobile","msgCode","created","methods","base64","key","validFn","test","_Toast","getCode","setInterval","clearInterval","login","$router","push","destroyed"],"sources":["src/views/login/index.vue"],"sourcesContent":["<!-- 登录 - 一级路由 -->\r\n<template>\r\n  <div>\r\n    <van-nav-bar\r\n    title=\"会员登录\"\r\n    left-arrow\r\n    @click-left=\"$router.go(-1)\"\r\n    />\r\n    <div class=\"p\">\r\n      <p class=\"p1\">手机号登录</p>\r\n      <p class=\"p2\">未注册的手机号登录后将自动注册</p>\r\n    </div>\r\n    <div class=\"int\">\r\n      <input v-model=\"mobile\" type=\"text\" placeholder=\"请输入手机号码\">\r\n    </div>\r\n    <div class=\"int\">\r\n      <input v-model=\"picCode\" type=\"text\" placeholder=\"请输入图形验证码\">\r\n      <img :src='picUrl' v-if=\"picUrl\" @click=\"getPicCode()\">\r\n    </div>\r\n    <div class=\"int\">\r\n      <input v-model=\"magCode\" type=\"text\" placeholder=\"请输入短信验证码\">\r\n      <button @click=\"getCode()\" class=\"btn1\">\r\n        {{ second === totalSecond ? '获取验证码' : second + '秒后重新发送' }}\r\n      </button>\r\n    </div>\r\n    <button @click=\"login()\" class=\"btn2\">登录</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import request from '@/utils/request.js'\r\nimport { getPicCode, getMsgCode, codeLogin } from '@/api/login.js'\r\nimport { Toast } from 'vant'\r\nexport default {\r\n  name: 'LoginPage',\r\n  data () {\r\n    return {\r\n      picCode: '', // 用户输入的图形验证码\r\n      picKey: '', // 将来请求传递的图形验证码\r\n      picUrl: '', // 存储请求渲染的图片地址\r\n      totalSecond: 60, // 总秒数\r\n      second: 60, // 当前秒数，开定时器 second--\r\n      timer: null, // 定时器 id\r\n      mobile: '', // 手机号\r\n      msgCode: ''// 手机验证码\r\n    }\r\n  },\r\n  async created () {\r\n    this.getPicCode()\r\n  },\r\n  methods: {\r\n    // 获取图像验证码\r\n    async getPicCode () {\r\n      // const { data: { base64, key } } = await request.get('/captcha/image')\r\n      const { data: { base64, key } } = await getPicCode()\r\n      this.picUrl = base64 // 存储地址\r\n      this.picKey = key // 存储唯一标识\r\n    },\r\n    // 校验 手机号 和 图形验证码 是否合格\r\n    validFn () {\r\n      if (!/^1[3-9]\\d{9}$/.test(this.mobile)) {\r\n        Toast('请输入正确的手机号')\r\n        return false\r\n      }\r\n      if (!/^\\w{4}$/.test(this.picCode)) {\r\n        Toast('图形验证码不正确')\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n    // 获取短信验证码\r\n    async getCode () {\r\n      if (!this.validFn()) {\r\n        // 如果没有通过校验，没有必要往下走\r\n        return\r\n      }\r\n      // 发送短信验证\r\n      await getMsgCode(this.picCode, this.picKey, this.mobile)\r\n      Toast('发送成功，请注意查收')\r\n\r\n      if (!this.timer && this.second === this.totalSecond) {\r\n        // 开启倒计时\r\n        this.timer = setInterval(() => {\r\n          this.second--\r\n          if (this.second <= 0) {\r\n            // 清除\r\n            clearInterval(this.timer)\r\n            this.timer = null // 重置定时器 id\r\n            this.second = this.totalSecond\r\n          }\r\n        }, 1000)\r\n      }\r\n    },\r\n    // 登录\r\n    async login () {\r\n      if (!this.validFn()) {\r\n        return\r\n      }\r\n      if (!/^\\d{6}$/.test(this.msgCode)) {\r\n        Toast('请输入正确的手机验证码')\r\n      }\r\n      await codeLogin(this.mobile, this.msgCode)\r\n      Toast('登录成功')\r\n      // 跳转到首页\r\n      this.$router.push('/')\r\n    }\r\n  },\r\n  // 离开页面，清除定时器\r\n  destroyed () {\r\n    clearInterval(this.timer)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/styles/css/login.css';\r\n</style>\r\n"],"mappings":";;;AA8BA;AACA,SAAAA,UAAA,EAAAC,UAAA,EAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,MAAA;MAAA;MACAC,MAAA;MAAA;MACAC,WAAA;MAAA;MACAC,MAAA;MAAA;MACAC,KAAA;MAAA;MACAC,MAAA;MAAA;MACAC,OAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,KAAAb,UAAA;EACA;EACAc,OAAA;IACA;IACA,MAAAd,WAAA;MACA;MACA;QAAAI,IAAA;UAAAW,MAAA;UAAAC;QAAA;MAAA,UAAAhB,UAAA;MACA,KAAAO,MAAA,GAAAQ,MAAA;MACA,KAAAT,MAAA,GAAAU,GAAA;IACA;IACA;IACAC,QAAA;MACA,qBAAAC,IAAA,MAAAP,MAAA;QACAQ,MAAA;QACA;MACA;MACA,eAAAD,IAAA,MAAAb,OAAA;QACAc,MAAA;QACA;MACA;MACA;IACA;IACA;IACA,MAAAC,QAAA;MACA,UAAAH,OAAA;QACA;QACA;MACA;MACA;MACA,MAAAhB,UAAA,MAAAI,OAAA,OAAAC,MAAA,OAAAK,MAAA;MACAQ,MAAA;MAEA,UAAAT,KAAA,SAAAD,MAAA,UAAAD,WAAA;QACA;QACA,KAAAE,KAAA,GAAAW,WAAA;UACA,KAAAZ,MAAA;UACA,SAAAA,MAAA;YACA;YACAa,aAAA,MAAAZ,KAAA;YACA,KAAAA,KAAA;YACA,KAAAD,MAAA,QAAAD,WAAA;UACA;QACA;MACA;IACA;IACA;IACA,MAAAe,MAAA;MACA,UAAAN,OAAA;QACA;MACA;MACA,eAAAC,IAAA,MAAAN,OAAA;QACAO,MAAA;MACA;MACA,MAAAjB,SAAA,MAAAS,MAAA,OAAAC,OAAA;MACAO,MAAA;MACA;MACA,KAAAK,OAAA,CAAAC,IAAA;IACA;EACA;EACA;EACAC,UAAA;IACAJ,aAAA,MAAAZ,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}